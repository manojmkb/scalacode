# A list of regular expressions used to validate individual fields provided as input to the DSRS application. Each
# entry also includes an errorMessageReference that refers to the errors.conf file indicating the specific error
# that should be thrown if the regular expression does not match the input field.
#
# Some regular expressions allow a regex literal to be passed in as %arg%, which will be replaced by
# using the replaceAll("%arg%", myLiteral) function in Scala prior to using the regex.
#
# Author: Taylor Mattison

VALIDATION_RULES: [{
  startDate: "1970-01-01T21:27:13Z"
  endDate: "2999-01-01T21:27:13Z"
  value: {
    Alpha: { # Composed of alphabetic characters
      regex: """^[A-Za-z]*$"""
      errorMessageReference: null #unused
    }
    AlphaNumeric: { # Composed of digits 0-9, alphabetic characters
      regex: """^[A-Za-z0-9]*$"""
      errorMessageReference: alphanumericCharacters
    }
    # Accepts a literal of the substring that the field must contain
    Contains: { # Contains a literal %arg%
      regex: """^.*(%arg%).*$"""
      errorMessageReference: null #unused
    }
    Date: { # A date with a 4 digit year, month from 01-12, and day from 01-31 separated by dashes. (YYYY-MM-DD)
      regex: """^\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[1-2]\d|3[0-1])$"""
      errorMessageReference: null #unused
    }
    DateTime: { # Same as IsDate plus a T or t, hours from 0-23, and minutes and seconds from 00-59 separated by colon,
      # and lastly a + or - followed by hours and minutes (YYYY-MM-DDThh:mm:ssÂ±hh:mm)
      regex: """^\d{4}\-(0[1-9]|1[0-2])\-(0[1-9]|[1-2]\d|3[0-1])[t|T]([0-1]\d|2[0-3]):([0-5]\d):([0-5]\d)[+-]([0-1]\d|2[0-3]):([0-5]\d)$"""
      errorMessageReference: invalidDateTime
    }
    Decimal: { # Positive or negative numbers with no leading zeros or trailing zeros after the decimal,
      # that may have a decimal point
      regex: """^-?([1-9]\d*|0)(\.\d*[1-9])?$"""
      errorMessageReference: null #unused
    }
    Email: { # A relatively permissive email regex that rejects dotless domains, quoted local-parts,
      # and most unusual/XSS characters (my_e-mail+comment@site.subdomain.domain)
      regex: """^[A-Za-z0-9][A-Za-z0-9._%+-]*@(?:[A-Za-z0-9-]+\.)+[A-Za-z]{2,}$"""
      errorMessageReference: null #unused
    }
    # Accepts a literal of the substring that the field must end with
    EndsWith: { # Ends with a literal %arg%
      regex: """^.*(%arg%)$"""
      errorMessageReference: null #unused
    }
    FileExtension: { # Ends with a file format that is allowed in DSRS (Note file extension is case-insensitive)
      regex: """^.*(?i)(\.bmp|\.csv|\.doc|\.docx|\.gif|\.jpeg|\.jpg|\.pdf|\.png|\.ppt|\.pptx|\.rtf|\.tiff|\.txt|\.xls|\.xlsx|\.xml)$"""
      errorMessageReference: invalidExtension
    }
    Filename: { # A safe S3 filename
      regex: """^[A-Za-z0-9!_.*'()\-]*$"""
      errorMessageReference: invalidCharacters
    }
    Identifier: { # Starts with a letter and may contain letters, numbers, or underscores
      regex: """^[A-Za-z][A-Za-z0-9_]*$"""
      errorMessageReference: null #unused
    }
    Integer: { # Positive or negative whole numbers with no leading zeros or decimals
      regex: """^-?([1-9]\d*|0)$"""
      errorMessageReference: numericCharacters
    }
    # Accepts a literal of the minimum number of characters that the field may contain
    MinLength: { # Contains at least %arg% characters
      regex: """^.{%arg%,}$"""
      errorMessageReference: minimumFieldLength
    }
    # Accepts a literal of the maximum number of characters that the field may contain
    MaxLength: { # Contains 0 to %arg% characters
      regex: """^.{0,%arg%}$"""
      errorMessageReference: maximumFieldLength
    }
    NumericCharacters: { # Composed of digits 0-9, allows leading zeros
      regex: """^\d*$"""
      errorMessageReference: numericCharacters
    }
    # Accepts a literal of the substring that the field must start with
    StartsWith: { # Starts with a literal %arg%
      regex: """^(%arg%).*$"""
      errorMessageReference: null #unused
    }
    StartsWithLetter: { # Starts with a letter
      regex: """^[a-zA-Z].*$"""
      errorMessageReference: null #unused
    }
    BadRule: { # Starts with a letter
      regex: """^[a-zA-Z].*$"""
      errorMessageReference: invalidCharacters
    }
    BadError: { # Starts with a letter
      regex: """^[a-zA-Z].*$"""
      errorMessageReference: badErrorMessage
    }
  }
}]